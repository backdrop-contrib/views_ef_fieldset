<?php
/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_views_api().
 */
function views_ef_fieldset_views_api() {
  return array(
    'api' => 3.0,
  );
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function views_ef_fieldset_form_views_exposed_form_alter(&$form, &$form_state) {
  if (isset($form_state['display'])) {
    $options = $form_state['display']->display_options['views_ef_fieldset'];

    if ($options['enabled']) {

      $form['filters'] = array(
        '#type' => isset($options['type']) ? $options['type'] : 'container',
        '#attributes' => array(
          'class' => array(
            'views_ef_fieldset',
            'views_ef_fieldset-type-' . $options['type']
          )
        )
      );

      $form['#attached']['css'] = array(
        drupal_get_path('module', 'views_ef_fieldset') . '/css/views_ef_fieldset.css'
      );

      // Get all level 0 items.
      $roots = _views_ef_fieldset_get_data($options['options']['sort'], 'pid');

      // Loop through all level 0 items.
      foreach($roots as $field) {
        $idx = $field['id'];

        // If it's a fieldset...
        if ($field['type'] == 'fieldset') {
          $form['filters']['fieldset-' . $idx] = array(
            '#type' => 'fieldset',
            '#title' => $field['title'],
            '#description' => $field['description'],
            '#collapsible' => (bool) $field['collapsible'],
            '#collapsed' => (bool) $field['collapsed'],
            '#attributes' => array(
              'class' => array(
                'views-ef-fieldset-fieldset',
                'views-ef-fieldset-fieldset-' . $idx
              )
            ),
            '#weight' => $field['weight']
          );
        }

        // If it's a filter field
        if ($field['type'] == 'filter') {
          $field_name = $form['#info']['filter-' . $idx]['value'];

          if(isset($form[$field_name]) && is_array($form[$field_name])) {
            $form['filters'][$field_name] = $form[$field_name] +
              array(
                '#weight' => $field['weight'],
                '#title' => $form['#info']['filter-' . $field['id']]['label']
              );
            unset($form['#info']['filter-' . $field['id']]);
            unset($form[$field_name]);
          }
        }

        // If it's a sort field
        if ($field['type'] == 'sort') {
          $field_name = $field['id'];

          if(isset($form[$field_name]) && is_array($form[$field_name])) {
            $form['filters'][$field_name] = $form[$field_name];
            $form['filters'][$field_name]['#weight'] = $field['weight'];
            unset($form[$field_name]);
          }
        }

        // If it's the action buttons
        if ($field['type'] == 'buttons') {
          $field_name = $field['id'];

          if(isset($form[$field_name]) && is_array($form[$field_name])) {
            $form['filters'][$field_name] = $form[$field_name];
            $form['filters'][$field_name]['#weight'] = $field['weight'];
            $form[$field_name]['#attributes']['style'][] = 'display:none;';
          }
        }

        // Get all items who are not fieldsets.
        $data2 = _views_ef_fieldset_get_data($options['options']['sort'], 'type', 'fieldset', '!=');
        // Get all items who are not fieldsets and having a fieldset as parent.
        $fields = _views_ef_fieldset_get_data($data2, 'pid', $field['id']);

        // Remove fieldsets that doesn't contains any fields.
        if ($field['type'] == 'fieldset' && count($fields) == 0) {
          unset($form['filters']['fieldset-'.$field['id']]);
        }

        // Loop through each level 1 items.
        foreach($fields as $field) {
          // If it's a filter field
          if ($field['type'] == 'filter') {
            $field_name = $form['#info']['filter-' . $field['id']]['value'];

            if(isset($form[$field_name]) && is_array($form[$field_name])) {
              $form['filters']['fieldset-' . $idx][$field_name] = $form[$field_name] +
                array(
                  '#weight' => $field['weight'],
                  '#title' => $form['#info']['filter-' . $field['id']]['label']
                );
              unset($form['#info']['filter-' . $field['id']]);
              unset($form[$field_name]);
            }
          }

          // If it's a sort field
          if ($field['type'] == 'sort') {
            $field_name = $field['id'];

            if(isset($form[$field_name]) && is_array($form[$field_name])) {
              $form['filters']['fieldset-' . $idx][$field_name] = $form[$field_name];
              $form['filters']['fieldset-' . $idx][$field_name]['#weight'] = $field['weight'];
              unset($form[$field_name]);
            }
          }

          // If it's the action buttons
          if ($field['type'] == 'buttons') {
            $field_name = $field['id'];

            if(isset($form[$field_name]) && is_array($form[$field_name])) {
              $form['filters']['fieldset-' . $idx][$field_name] = $form[$field_name];
              $form['filters']['fieldset-' . $idx][$field_name]['#weight'] = $field['weight'];
              $form[$field_name]['#attributes']['style'][] = 'display:none;';
            }
          }
        }
      }
      // Trick
      // see function template_preprocess_views_exposed_form().
      $form['#info']['views_ef_fieldset']['value'] = 'filters';
    }
  }
}

/**
 * Implements hook_theme().
 */
function views_ef_fieldset_theme() {
  return array(
    'views_ef_fieldset_reorder_form' => array(
      'render element' => 'form',
      'file' => 'views_ef_fieldset.theme.inc'
    ),
  );
}

/**
 * This helper function is used to query the sort array and to get
 * the relevant items, a bit like a sql database.
 *
 * @param $data
 * @param $key
 * @param null $value
 * @param string $operator
 * @return array
 */
function _views_ef_fieldset_get_data($data, $key, $value = NULL, $operator = '==') {
  $result = array();
  foreach ($data as $item) {
    if (array_key_exists($key, $item)) {
      switch ($operator) {
        case '==':
          if ($item[$key] == $value) {
            $result[] = $item;
          }
          break;
        case '!=':
          if ($item[$key] != $value) {
            $result[] = $item;
          }
      }
    }
  }

  // Automatically get sorted results.
  usort($result, '_views_ef_fieldset_sort_by_weight');

  return $result;
}

/**
 * Internal function used to sort array items by weight.
 */
function _views_ef_fieldset_sort_by_weight($a, $b) {
  if ($a['weight'] == $b['weight']) {
    return 0;
  }
  return ($a['weight'] < $b['weight'] ? -1 : 1);
}
